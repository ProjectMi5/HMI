extends layout

block content

  include mixins/fixMorrisDonut
  +fixMorrisDonut()
  include mixins/cocktailColors
  +cocktailColors()

  div.row
    h1.page-header Cocktail-Feedback

    div.col-lg-12
      div.panel.panel-default
        div.panel-heading
          div.row
            div.col-lg-6.col-md-6.text-center
              img(id="pictureRecipe" + recommendation.recipe.id, src="/assets/images/recipes/recipe" + recommendation.recipe.id + "/cocktail.jpg", style="border-radius: 100%; horizontal-align: middle; vertical-align: middle; width:70%")
            div.col-lg-6.col-md-6
              div.jumbotron
                h1
                  | #{recommendation.recipe.name}
                  //| Free Passion
                p Operator has sent feedback
        div.panel-body
          //p= recommendation
          div.row
            div.col-lg-6.col-md-6.text-center
              h2 Order
              div#order(style="width: 100%")
              script.
                // Rounded for two decimal numbers - floor (abrunden)
                var plot_data = [];
                plot_data.order_data = [];
                plot_data.order_colors = [];

                // Admittedly not a very nice solution. But working...
                for (var i = 0; i < #{recommendation.order.mixRatio.ratio.length}; i++) {
                  switch (i) {
                    case 0:
                      plot_data.order_data[0] = {
                        label: '#{recommendation.order.mixRatio.ingredientName[0]}',
                        value: Math.round('#{recommendation.order.mixRatio.ratio[0]}' * 100) / 100
                      };
                      plot_data.order_colors[0] = getColorForIngredient('#{recommendation.order.mixRatio.ingredientName[0]}');
                      break;
                    case 1:
                      plot_data.order_data[1] = {
                        label: '#{recommendation.order.mixRatio.ingredientName[1]}',
                        value: Math.round('#{recommendation.order.mixRatio.ratio[1]}' * 100) / 100
                      };
                      plot_data.order_colors[1] = getColorForIngredient('#{recommendation.order.mixRatio.ingredientName[1]}');

                      break;
                    case 2:
                      plot_data.order_data[2] = {
                        label: '#{recommendation.order.mixRatio.ingredientName[2]}',
                        value: Math.round('#{recommendation.order.mixRatio.ratio[2]}' * 100) / 100
                      };
                      plot_data.order_colors[2] = getColorForIngredient('#{recommendation.order.mixRatio.ingredientName[2]}');
                      break;
                    case 3:
                      plot_data.order_data[3] = {
                        label: '#{recommendation.order.mixRatio.ingredientName[3]}',
                        value: Math.round('#{recommendation.order.mixRatio.ratio[3]}' * 100) / 100
                      };
                      plot_data.order_colors[3] = getColorForIngredient('#{recommendation.order.mixRatio.ingredientName[3]}');
                      break;
                    case 4:
                      plot_data.order_data[4] = {
                        label: '#{recommendation.order.mixRatio.ingredientName[4]}',
                        value: Math.round('#{recommendation.order.mixRatio.ratio[4]}' * 100) / 100
                      };
                      plot_data.order_colors[4] = getColorForIngredient('#{recommendation.order.mixRatio.ingredientName[4]}');
                      break;
                    case 5:
                      plot_data.order_data[5] = {
                        label: '#{recommendation.order.mixRatio.ingredientName[5]}',
                        value: Math.round('#{recommendation.order.mixRatio.ratio[5]}' * 100) / 100
                      };
                      plot_data.order_colors[5] = getColorForIngredient('#{recommendation.order.mixRatio.ingredientName[5]}');
                      break;
                    case 6:
                      plot_data.order_data[6] = {
                        label: '#{recommendation.order.mixRatio.ingredientName[6]}',
                        value: Math.round('#{recommendation.order.mixRatio.ratio[6]}' * 100) / 100
                      };
                      plot_data.order_colors[6] = getColorForIngredient('#{recommendation.order.mixRatio.ingredientName[6]}');
                      break;
                    case 7:
                      plot_data.order_data[7] = {
                        label: '#{recommendation.order.mixRatio.ingredientName[7]}',
                        value: Math.round('#{recommendation.order.mixRatio.ratio[7]}' * 100) / 100
                      };
                      plot_data.order_colors[7] = getColorForIngredient('#{recommendation.order.mixRatio.ingredientName[7]}');
                      break;
                  }
                }

                Morris.Donut({
                  element: 'order',
                  data: plot_data.order_data,
                  colors: plot_data.order_colors
                });
            div.col-lg-6.col-md-6.text-center
              h2 Recommendation
              div#recommendation(style="width: 100%")
              script.
                // Rounded for two decimal numbers - floor (abrunden)
                /*
                Morris.Donut({
                   element: 'recommendation',
                   data: [
                      {
                        label: '#{recommendation.recommendation.mixRatio.ingredientName[0]}',
                        value: Math.round(#{recommendation.recommendation.mixRatio.ratio[0]}*100)/100
                      },
                      {
                        label: '#{recommendation.recommendation.mixRatio.ingredientName[1]}',
                        value: Math.round(#{recommendation.recommendation.mixRatio.ratio[1]}*100)/100
                      },
                      {
                        label: '#{recommendation.recommendation.mixRatio.ingredientName[2]}',
                        value: Math.round(#{recommendation.recommendation.mixRatio.ratio[2]}*100)/100
                      }
                   ],
                  colors: [getColorForIngredient('#{recommendation.recommendation.mixRatio.ingredientName[0]}'),
                    getColorForIngredient('#{recommendation.recommendation.mixRatio.ingredientName[1]}'),
                    getColorForIngredient('#{recommendation.recommendation.mixRatio.ingredientName[2]}')]
                });
                */

                var plot_data = [];
                plot_data.rec_data = [];
                plot_data.rec_colors = [];

                // Admittedly not a very nice solution. But working...
                for (var i = 0; i < #{recommendation.recommendation.mixRatio.ratio.length}; i++) {
                  switch (i) {
                    case 0:
                      plot_data.rec_data[0] = {
                        label: '#{recommendation.recommendation.mixRatio.ingredientName[0]}',
                        value: Math.round('#{recommendation.recommendation.mixRatio.ratio[0]}' * 100) / 100
                      };
                      plot_data.rec_colors[0] = getColorForIngredient('#{recommendation.recommendation.mixRatio.ingredientName[0]}');
                      break;
                    case 1:
                      plot_data.rec_data[1] = {
                        label: '#{recommendation.recommendation.mixRatio.ingredientName[1]}',
                        value: Math.round('#{recommendation.recommendation.mixRatio.ratio[1]}' * 100) / 100
                      };
                      plot_data.rec_colors[1] = getColorForIngredient('#{recommendation.recommendation.mixRatio.ingredientName[1]}');

                      break;
                    case 2:
                      plot_data.rec_data[2] = {
                        label: '#{recommendation.recommendation.mixRatio.ingredientName[2]}',
                        value: Math.round('#{recommendation.recommendation.mixRatio.ratio[2]}' * 100) / 100
                      };
                      plot_data.rec_colors[2] = getColorForIngredient('#{recommendation.recommendation.mixRatio.ingredientName[2]}');
                      break;
                    case 3:
                      plot_data.rec_data[3] = {
                        label: '#{recommendation.recommendation.mixRatio.ingredientName[3]}',
                        value: Math.round('#{recommendation.recommendation.mixRatio.ratio[3]}' * 100) / 100
                      };
                      plot_data.rec_colors[3] = getColorForIngredient('#{recommendation.recommendation.mixRatio.ingredientName[3]}');
                      break;
                    case 4:
                      plot_data.rec_data[4] = {
                        label: '#{recommendation.recommendation.mixRatio.ingredientName[4]}',
                        value: Math.round('#{recommendation.recommendation.mixRatio.ratio[4]}' * 100) / 100
                      };
                      plot_data.rec_colors[4] = getColorForIngredient('#{recommendation.recommendation.mixRatio.ingredientName[4]}');
                      break;
                    case 5:
                      plot_data.rec_data[5] = {
                        label: '#{recommendation.recommendation.mixRatio.ingredientName[5]}',
                        value: Math.round('#{recommendation.recommendation.mixRatio.ratio[5]}' * 100) / 100
                      };
                      plot_data.rec_colors[5] = getColorForIngredient('#{recommendation.recommendation.mixRatio.ingredientName[5]}');
                      break;
                    case 6:
                      plot_data.rec_data[6] = {
                        label: '#{recommendation.recommendation.mixRatio.ingredientName[6]}',
                        value: Math.round('#{recommendation.recommendation.mixRatio.ratio[6]}' * 100) / 100
                      };
                      plot_data.rec_colors[6] = getColorForIngredient('#{recommendation.recommendation.mixRatio.ingredientName[6]}');
                      break;
                    case 7:
                      plot_data.rec_data[7] = {
                        label: '#{recommendation.recommendation.mixRatio.ingredientName[7]}',
                        value: Math.round('#{recommendation.recommendation.mixRatio.ratio[7]}' * 100) / 100
                      };
                      plot_data.rec_colors[7] = getColorForIngredient('#{recommendation.recommendation.mixRatio.ingredientName[7]}');
                      break;
                  }
                }

                Morris.Donut({
                  element: 'recommendation',
                  data: plot_data.rec_data,
                  colors: plot_data.rec_colors
                });

